{"ast":null,"code":"var _jsxFileName = \"/Users/koushikdey/Desktop/React practice/full-stack-open/src/App.js\";\n//ex: experimental lesson\n// https://fullstackopen.com/en/part2/adding_styles_to_react_app\n// running command in the local server:\n// npx json-server --port 3001 --watch db2.json\n\nimport { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport Notification from \"./components/Notification\";\nimport noteService from \"./services/notes\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n  useEffect(() => {\n    noteService.getAll().then(initialNotes => {\n      setNotes(initialNotes);\n    });\n  }, []);\n  const addNote = e => {\n    e.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1\n    };\n    noteService.create(noteObject).then(returnedNote => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote('');\n    });\n  };\n\n  // defined an initial version of the toggleImportanceOf event handler function and passes it to every Note component\n  const toggleImportanceOf = id => {\n    //console.log(`importance of ${id} needs to be toggled`);\n    //const url = `http://localhost:3001/notes/${id}`   // defines the unique url for each note resource based on its id.\n    const note = notes.find(n => n.id === id); // find method is used to find the note wanted to modify, and then assigned it to the note variable.\n    const changedNote = {\n      ...note,\n      important: !note.important\n    }; // created a new object that is an exact copy of the old note, apart from the important property.\n\n    //The callback function sets the component's notes state to a new array that contains all the items from the previous notes array,\n    //except for the old note which is replaced by the updated version of it returned by the server.\n    //This is accomplished with the map method:\n    noteService.update(id, changedNote).then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote));\n    }).catch(error => {\n      setErrorMessage(`Note '${note.content}' was already deleted from server`);\n      setTimeout(() => setErrorMessage(null), 5000);\n      setNotes(notes.filter(n => n.id !== id));\n    });\n  };\n\n  // The map method creates a new array by mapping every item from the old array into an item in the new array.\n  // In the example, the new array is created conditionally so that if note.id !== id is true;\n  // simply copied the item from the old array into the new array.\n  //If the condition is false, then the note object returned by the server is added to the array instead.\n\n  const handleNoteChange = e => {\n    setNewNote(e.target.value);\n  };\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      message: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowAll(!showAll),\n        children: [\"show \", showAll ? 'important' : 'all']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notesToShow.map(note => /*#__PURE__*/_jsxDEV(Note, {\n        note: note,\n        toggleImportance: () => toggleImportanceOf(note.id)\n      }, note.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addNote,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: newNote,\n        onChange: handleNoteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\nexport default App;","map":{"version":3,"names":["useState","useEffect","Note","Notification","noteService","App","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","getAll","then","initialNotes","addNote","e","preventDefault","noteObject","content","date","Date","toISOString","important","Math","random","id","length","create","returnedNote","concat","toggleImportanceOf","note","find","n","changedNote","update","map","catch","error","setTimeout","filter","handleNoteChange","target","value","notesToShow"],"sources":["/Users/koushikdey/Desktop/React practice/full-stack-open/src/App.js"],"sourcesContent":["//ex: experimental lesson\n// https://fullstackopen.com/en/part2/adding_styles_to_react_app\n// running command in the local server:\n// npx json-server --port 3001 --watch db2.json\n\nimport { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport Notification from \"./components/Notification\";\nimport noteService from \"./services/notes\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const addNote = (e) => {\n    e.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n    })\n  };\n\n  // defined an initial version of the toggleImportanceOf event handler function and passes it to every Note component\n  const toggleImportanceOf = id => {\n    //console.log(`importance of ${id} needs to be toggled`);\n    //const url = `http://localhost:3001/notes/${id}`   // defines the unique url for each note resource based on its id.\n    const note = notes.find(n => n.id === id)    // find method is used to find the note wanted to modify, and then assigned it to the note variable.\n    const changedNote = { ...note, important: !note.important }   // created a new object that is an exact copy of the old note, apart from the important property.\n\n    //The callback function sets the component's notes state to a new array that contains all the items from the previous notes array,\n    //except for the old note which is replaced by the updated version of it returned by the server.\n    //This is accomplished with the map method:\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n      setErrorMessage(\n        `Note '${note.content}' was already deleted from server`\n      )\n      setTimeout(() => setErrorMessage(null), 5000)\n      setNotes(notes.filter(n => n.id !== id))\n    })\n  };\n\n  // The map method creates a new array by mapping every item from the old array into an item in the new array.\n  // In the example, the new array is created conditionally so that if note.id !== id is true;\n  // simply copied the item from the old array into the new array.\n  //If the condition is false, then the note object returned by the server is added to the array instead.\n\n  const handleNoteChange = (e) => {\n    setNewNote(e.target.value);\n  };\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note =>\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}