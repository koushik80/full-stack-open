{"ast":null,"code":"var _jsxFileName = \"/Users/koushikdey/Desktop/React practice/full-stack-open/src/App.js\";\n//ex: experimental\n// https://fullstackopen.com/en/part2/altering_data_in_server\n// running command in the local server:\n// npx json - server--port 3001 --watch db2.json\n\nimport { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport axios from \"axios\";\nimport noteService from \"./services/notes\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  useEffect(() => {\n    noteService.getAll().then(response => {\n      setNotes(response.data);\n    });\n  }, []);\n\n  // defined an initial version of the toggleImportanceOf event handler function and passes it to every Note component\n  const toggleImportanceOf = id => {\n    console.log(`importance of ${id} needs to be toggled`);\n    //const url = `http://localhost:3001/notes/${id}`   // defines the unique url for each note resource based on its id.\n    const note = notes.find(n => n.id === id); // find method is used to find the note wanted to modify, and then assigned it to the note variable.\n    const changedNote = {\n      ...note,\n      important: !note.important\n    }; // created a new object that is an exact copy of the old note, apart from the important property.\n\n    //The callback function sets the component's notes state to a new array that contains all the items from the previous notes array,\n    //except for the old note which is replaced by the updated version of it returned by the server.\n    //This is accomplished with the map method:\n    noteService.update(id, changedNote).then(response => {\n      setNotes(notes.map(n => n.id !== id ? n : response.data));\n    });\n  };\n\n  // The map method creates a new array by mapping every item from the old array into an item in the new array.\n  // In the example, the new array is created conditionally so that if note.id !== id is true;\n  // simply copied the item from the old array into the new array.\n  //If the condition is false, then the note object returned by the server is added to the array instead.\n\n  const addNote = e => {\n    e.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5\n      //id: notes.length + 1,\n    };\n\n    noteService.create(noteObject).then(response => {\n      setNotes(notes.concat(response.data));\n      setNewNote('');\n    });\n  };\n  const handleNoteChange = e => {\n    setNewNote(e.target.value);\n  };\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowAll(!showAll),\n        children: [\"show \", showAll ? 'important' : 'all']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notesToShow.map(note => /*#__PURE__*/_jsxDEV(Note, {\n        note: note,\n        toggleImportance: () => toggleImportanceOf(note.id)\n      }, note.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addNote,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: newNote,\n        onChange: handleNoteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\nexport default App;","map":{"version":3,"names":["useState","useEffect","Note","axios","noteService","App","notes","setNotes","newNote","setNewNote","showAll","setShowAll","getAll","then","response","data","toggleImportanceOf","id","console","log","note","find","n","changedNote","important","update","map","addNote","e","preventDefault","noteObject","content","date","Date","toISOString","Math","random","create","concat","handleNoteChange","target","value","notesToShow","filter"],"sources":["/Users/koushikdey/Desktop/React practice/full-stack-open/src/App.js"],"sourcesContent":["//ex: experimental\n// https://fullstackopen.com/en/part2/altering_data_in_server\n// running command in the local server:\n// npx json - server--port 3001 --watch db2.json\n\nimport { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport axios from \"axios\";\nimport noteService from \"./services/notes\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(response => {\n        setNotes(response.data)\n      })\n  }, [])\n\n  // defined an initial version of the toggleImportanceOf event handler function and passes it to every Note component\n  const toggleImportanceOf = (id) => {\n    console.log(`importance of ${id} needs to be toggled`);\n    //const url = `http://localhost:3001/notes/${id}`   // defines the unique url for each note resource based on its id.\n    const note = notes.find(n => n.id === id)    // find method is used to find the note wanted to modify, and then assigned it to the note variable.\n    const changedNote = { ...note, important: !note.important }   // created a new object that is an exact copy of the old note, apart from the important property.\n\n    //The callback function sets the component's notes state to a new array that contains all the items from the previous notes array,\n    //except for the old note which is replaced by the updated version of it returned by the server.\n    //This is accomplished with the map method:\n    noteService\n      .update(id, changedNote)\n      .then(response => {\n        setNotes(notes.map(n => n.id !== id ? n : response.data))\n        })\n  };\n\n  // The map method creates a new array by mapping every item from the old array into an item in the new array.\n  // In the example, the new array is created conditionally so that if note.id !== id is true;\n  // simply copied the item from the old array into the new array.\n  //If the condition is false, then the note object returned by the server is added to the array instead.\n\n  const addNote = (e) => {\n    e.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      //id: notes.length + 1,\n    }\n\n    noteService\n      .create(noteObject)\n      .then(response => {\n        setNotes(notes.concat(response.data))\n        setNewNote('')\n    })\n  };\n\n  const handleNoteChange = (e) => {\n    setNewNote(e.target.value);\n  };\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important);\n\n\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note =>\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}